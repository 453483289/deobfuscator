{"name":"Java Deobfuscator","tagline":"","body":"# Java Deobfuscator\r\nJava Deobfuscator is the most advanced deobfuscator available, and it's free to use. It can remove transformations by some of the most popular obfuscators such as [Stringer](https://jfxstore.com/stringer) and [Zelix Klassmaster](http://zelix.com).\r\n\r\n## Downloads\r\n\r\nThe latest build can be downloaded from my [CI Server](https://ci.samczsun.com/job/Deobfuscator/)\r\n\r\n## What can the deobfuscator do?\r\n\r\nThe deobfuscator supports deobfuscation of transformations such as string literal encryption, or reflection obfuscation. These transformations have been hard coded for a specific obfuscator, but generic deobfuscators are also available.\r\n\r\n## What can't the deobfuscator do?\r\n\r\nThings like method names, class names, etc cannot be deobfuscated because there renaming is irreversible. The information needed to deobfuscate is removed.\r\n\r\n## CLI\r\nIf you don't want to import the project, you can always use the command line interface. There are four arguments that are taken.\r\n\r\n| Argument | Description |\r\n| --- | --- |\r\n| -input | The JAR to deobfuscate |\r\n| -output | The file to write to |\r\n| -transformer | A canonical name of the transformer class|\r\n| -path | A dependency of the JAR being deobfuscated |\r\n\r\nYou may specify multiple transformers, and they will be applied in the order given. Order does matter as sometimes one transformation depends on another not being present.\r\n\r\nIf you wish to use one of the default transformers, then you may remove the `com.javadeobfuscator.deobfuscator.transformers` prefix.\r\n\r\n## Examples\r\n\r\n### As a library\r\n\r\n```java\r\npublic class SomeRandomDeobfuscator {\r\n    public static void main(String[] args) throws Throwable {\r\n        new Deobfuscator()\r\n            .withInput(new File(\"input.jar\"))\r\n            .withOutput(new File(\"output.jar\"))\r\n            .withClasspath(new File(\"path/to/rt.jar\"))\r\n            .withTransformer(Transformers.Generic.SYNTHETIC_BRIDGE)\r\n            .start();\r\n    }\r\n}\r\n```\r\n\r\n### CLI\r\n`java -jar deobfuscator.jar -input input.jar -output output.jar -transformer general.SyntheticBridgeTransformer -path path/to/rt.jar`\r\n\r\n## Transformers\r\n\r\nOfficial transformers are linked via the `Transformers` class.\r\n\r\n| Transformer | Canonical Name |  Description |\r\n| --- | --- | --- |\r\n| Allatori.STRING_ENCRYPTION | allatori.StringEncryptionTransformer | Decrypts strings encrypted by Allatori |\r\n| DashO.STRING_ENCRYPTION | dasho.StringEncryptionTransformer | Decrypts strings encrypted by DashO |\r\n| Stringer.STRING_ENCRYPTION | stringer.StringEncryptionTransformer | Decrypts strings encrypted by Stringer |\r\n| Stringer.INVOKEDYNAMIC | stringer.InvokedynamicTransformer | Decrypts invokedynamic obfuscated calls by Stringer |\r\n| Stringer.REFLECTION_OBFUSCATION | stringer.ReflectionObfuscationTransformer | Decrypts reflection obfuscated calls by Stringer |\r\n| General.SYNTHETIC_BRIDGE | general.SyntheticBridgeTransformer | Removes synthetic and bridge modifiers from all methods and fields |","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}